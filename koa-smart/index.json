[
  {
    "__docId__": 0,
    "kind": "file",
    "name": "src/App.js",
    "content": "import { join as pathJoin } from 'path';\nimport { readdirSync } from 'fs';\nimport Koa from 'koa';\nimport locale from 'koa-locale';\n\nimport Route from './routes/Route';\nimport notFound from './middlewares/notFound';\n\nimport { objValToArray } from './utils/utils';\n\n\nexport default class App {\n\n  /**\n   * @ignore\n   */\n  routeParam = null;\n  /**\n   * @ignore\n   */\n  routes = {};\n\n  constructor(opt) {\n    const {\n      routeParam = {},\n      port = process.env.PORT || 3000,\n    } = opt;\n    this.routeParam = routeParam;\n    /**\n     * @ignore\n     * @type {number}\n     */\n    this.port = port;\n    /**\n     * @ignore\n     * @type {Koa}\n     */\n    this.app = new Koa();\n\n    locale(this.app)\n  }\n\n  /**\n   * @ignore\n   */\n  _getAllRoutes(path, prefix) {\n    this.routes[prefix] = this.routes[prefix] || {};\n\n    readdirSync(path)\n      .filter(file => file.endsWith('.js') || file.endsWith('.ts'))\n      .forEach((file) => {\n        const RouteClass = require(pathJoin(path, file)).default;\n        if (RouteClass && RouteClass.prototype instanceof Route) {\n          const route = new RouteClass({\n            prefix,\n            app: this.app,\n            routes: this.routes[prefix],\n            ...this.routeParam,\n          });\n          this.routes[prefix][route.constructor.name] = route;\n        }\n      });\n    return objValToArray(this.routes[prefix]);\n  }\n\n  /**\n   * @access public\n   * @desc adds the provided functions to the list of Koa middlewares to be executed for all routes.\n   * @param {function} middlewares an array of Koa-compliant middlewares\n   * @return { }\n   */\n  addMiddlewares(middlewares) {\n    middlewares.forEach(e => this.addMiddleware(e));\n  }\n\n  /**\n   * @access public\n   * @desc adds the provided function to the list of Koa middlewares to be executed for all routes.\n   * @param {function[]} middleware an array of middlewares\n   * @return { }\n   */\n  addMiddleware(middleware) {\n    this.app.use(middleware);\n  }\n\n  /**\n   * @access public\n   * @desc \"mounts\" a folder, scanning it for route files, then adding the discovered routes to the app.\n   *       a route is a class which extends {@link Route}\n   * @param {string} pathFolder the path of the folder to mount\n   * @param {string} [prefix='/'] an optional prefix to prepend to all of the folder's routes\n   * @return { }\n   */\n  mountFolder(pathFolder, prefix = '/') {\n    const routes = this._getAllRoutes(pathFolder, prefix);\n    for (const route of routes) {\n      route.mount();\n      this.app.use(route.koaRouter.middleware());\n    }\n  }\n\n  /**\n   * @access public\n   * @desc Launches the app and starts listening on the configured port.\n   * @return {Koa}\n   */\n  async start() {\n    this.app.use(notFound());\n    return this.app.listen(this.port);\n  }\n}\n",
    "static": true,
    "longname": "/home/elkaim_r/Project/koa-smart/src/App.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 1,
    "kind": "class",
    "name": "App",
    "memberof": "src/App.js",
    "static": true,
    "longname": "src/App.js~App",
    "access": "public",
    "export": true,
    "importPath": "koa-smart/src/App.js",
    "importStyle": "App",
    "description": null,
    "lineNumber": 12,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 2,
    "kind": "member",
    "name": "routeParam",
    "memberof": "src/App.js~App",
    "static": false,
    "longname": "src/App.js~App#routeParam",
    "access": "public",
    "description": "",
    "lineNumber": 17,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 3,
    "kind": "member",
    "name": "routes",
    "memberof": "src/App.js~App",
    "static": false,
    "longname": "src/App.js~App#routes",
    "access": "public",
    "description": "",
    "lineNumber": 21,
    "ignore": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 4,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 23,
    "undocument": true
  },
  {
    "__docId__": 6,
    "kind": "member",
    "name": "port",
    "memberof": "src/App.js~App",
    "static": false,
    "longname": "src/App.js~App#port",
    "access": "public",
    "description": "",
    "lineNumber": 33,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 7,
    "kind": "member",
    "name": "app",
    "memberof": "src/App.js~App",
    "static": false,
    "longname": "src/App.js~App#app",
    "access": "public",
    "description": "",
    "lineNumber": 38,
    "ignore": true,
    "type": {
      "nullable": null,
      "types": [
        "Koa"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 8,
    "kind": "method",
    "name": "_getAllRoutes",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#_getAllRoutes",
    "access": "private",
    "description": "",
    "lineNumber": 46,
    "ignore": true,
    "params": [
      {
        "name": "path",
        "types": [
          "*"
        ]
      },
      {
        "name": "prefix",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 9,
    "kind": "method",
    "name": "addMiddlewares",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#addMiddlewares",
    "access": "public",
    "description": "adds the provided functions to the list of Koa middlewares to be executed for all routes.",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "middlewares",
        "description": "an array of Koa-compliant middlewares"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 10,
    "kind": "method",
    "name": "addMiddleware",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#addMiddleware",
    "access": "public",
    "description": "adds the provided function to the list of Koa middlewares to be executed for all routes.",
    "lineNumber": 82,
    "params": [
      {
        "nullable": null,
        "types": [
          "function[]"
        ],
        "spread": false,
        "optional": false,
        "name": "middleware",
        "description": "an array of middlewares"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 11,
    "kind": "method",
    "name": "mountFolder",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/App.js~App#mountFolder",
    "access": "public",
    "description": "\"mounts\" a folder, scanning it for route files, then adding the discovered routes to the app.\n      a route is a class which extends {@link Route}",
    "lineNumber": 94,
    "params": [
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "pathFolder",
        "description": "the path of the folder to mount"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "'/'",
        "defaultRaw": "'/'",
        "name": "prefix",
        "description": "an optional prefix to prepend to all of the folder's routes"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 12,
    "kind": "method",
    "name": "start",
    "memberof": "src/App.js~App",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/App.js~App#start",
    "access": "public",
    "description": "Launches the app and starts listening on the configured port.",
    "lineNumber": 107,
    "return": {
      "nullable": null,
      "types": [
        "Koa"
      ],
      "spread": false,
      "description": ""
    },
    "params": []
  },
  {
    "__docId__": 13,
    "kind": "file",
    "name": "src/middlewares/handleError.js",
    "content": "const __ = string => string;\n\n/**\n * @typedef OptionErrors\n * @property {boolean} [logAll = false] if set to true, all logs will be displayed regardless of their individual settings\n * @property {boolean} [logErrorUnknown = false] whether unknown errors should be displayed\n * @property {boolean} [logErrorSequelize = false] whether errors pertaining to the models should be logged\n * @property {boolean} [logErrorApp = false] whether errors coming from thrown {@link ErrorApp} should be logged\n */\nlet options = {\n  logAll: false,\n  logErrorUnknown: false,\n  logErrorSequelize: false,\n  logErrorApp: false,\n}\n\nfunction displayLog(error, type) {\n  if (options.logAll || options[type]) {\n    console.error(error);\n  }\n}\n\nfunction getMessageTranslate(ctx, msg, toTranslate) {\n  if (toTranslate) {\n    if (ctx.i18n && ctx.i18n.__) {\n      return ctx.i18n.__(msg);\n    } else if (ctx.state && ctx.state.__) {\n      return ctx.state.__(msg);\n    }\n  }\n  return msg;\n}\n\n\nasync function handleError(ctx, next) {\n  try {\n    await next();\n  } catch (err) {\n    const arraySequelize = ['SequelizeValidationError', 'SequelizeUniqueConstraintError'];\n\n    if (err.constructor.name === 'ErrorApp') { // expected error\n      ctx.status = err.status;\n      ctx.body = { message: getMessageTranslate(ctx, err.message, err.toTranslate) };\n      displayLog(err, 'logErrorApp');\n    } else if (arraySequelize.includes(err.name)) { // sequilize expected error by validattor or other\n      ctx.status = 400;\n      ctx.body = { message: getMessageTranslate(ctx, err.message.split(':').pop(), true) };\n      displayLog(err, 'logErrorSequelize');\n    } else { // unexpected error\n      ctx.status = 500;\n      ctx.body = { message: getMessageTranslate(ctx, __('Please contact the support'), true) };\n      displayLog(err, 'logErrorUnknown');\n    }\n  }\n}\n\n/**\n * middleware in charge of handling errors thrown on purpose, either through manually throwing {@link ErrorApp}, either through calling {@link Route.throw}.\n *\n * It will also make sure errors pertaining to models as well as unexpected error are given a clearer message.\n * @param {OptionErrors} [opt = {}] option object to set which events should be logged\n */\nexport default (opt = {}) => {\n  options = {\n    ...options,\n    ...opt,\n  }\n  return handleError;\n};\n",
    "static": true,
    "longname": "/home/elkaim_r/Project/koa-smart/src/middlewares/handleError.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 14,
    "kind": "function",
    "name": "__",
    "memberof": "src/middlewares/handleError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/middlewares/handleError.js~__",
    "access": "private",
    "export": false,
    "importPath": "koa-smart/src/middlewares/handleError.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "params": [
      {
        "name": "string",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 15,
    "kind": "typedef",
    "name": "OptionErrors",
    "memberof": "src/middlewares/handleError.js",
    "static": true,
    "longname": "src/middlewares/handleError.js~OptionErrors",
    "access": "public",
    "description": "",
    "lineNumber": 10,
    "properties": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " false",
        "defaultRaw": false,
        "name": "logAll",
        "description": "if set to true, all logs will be displayed regardless of their individual settings"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " false",
        "defaultRaw": false,
        "name": "logErrorUnknown",
        "description": "whether unknown errors should be displayed"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " false",
        "defaultRaw": false,
        "name": "logErrorSequelize",
        "description": "whether errors pertaining to the models should be logged"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " false",
        "defaultRaw": false,
        "name": "logErrorApp",
        "description": "whether errors coming from thrown {@link ErrorApp} should be logged"
      }
    ],
    "type": {
      "types": [
        "*"
      ],
      "optional": false,
      "name": "OptionErrors"
    }
  },
  {
    "__docId__": 16,
    "kind": "function",
    "name": "displayLog",
    "memberof": "src/middlewares/handleError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/middlewares/handleError.js~displayLog",
    "access": "public",
    "export": false,
    "importPath": "koa-smart/src/middlewares/handleError.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 17,
    "undocument": true,
    "params": [
      {
        "name": "error",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 17,
    "kind": "function",
    "name": "getMessageTranslate",
    "memberof": "src/middlewares/handleError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/middlewares/handleError.js~getMessageTranslate",
    "access": "public",
    "export": false,
    "importPath": "koa-smart/src/middlewares/handleError.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 23,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "msg",
        "types": [
          "*"
        ]
      },
      {
        "name": "toTranslate",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    },
    "ignore": true
  },
  {
    "__docId__": 18,
    "kind": "function",
    "name": "handleError",
    "memberof": "src/middlewares/handleError.js",
    "generator": false,
    "async": true,
    "static": true,
    "longname": "src/middlewares/handleError.js~handleError",
    "access": "public",
    "export": false,
    "importPath": "koa-smart/src/middlewares/handleError.js",
    "importStyle": null,
    "description": null,
    "lineNumber": 35,
    "undocument": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "next",
        "types": [
          "*"
        ]
      }
    ],
    "return": null,
    "ignore": true
  },
  {
    "__docId__": 19,
    "kind": "function",
    "name": "handleError",
    "memberof": "src/middlewares/handleError.js",
    "generator": false,
    "async": false,
    "static": true,
    "longname": "src/middlewares/handleError.js~handleError",
    "access": "public",
    "export": true,
    "importPath": "koa-smart/src/middlewares/handleError.js",
    "importStyle": "handleError",
    "description": "middleware in charge of handling errors thrown on purpose, either through manually throwing {@link ErrorApp}, either through calling {@link Route.throw}.\n\nIt will also make sure errors pertaining to models as well as unexpected error are given a clearer message.",
    "lineNumber": 63,
    "params": [
      {
        "nullable": null,
        "types": [
          "OptionErrors"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": " {}",
        "defaultRaw": {},
        "name": "opt",
        "description": "option object to set which events should be logged"
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 20,
    "kind": "file",
    "name": "src/routes/Route.js",
    "content": "import KoaRouter from 'koa-router';\nimport chalk from 'chalk';\nimport { RateLimit } from 'koa2-ratelimit';\n\nimport ErrorApp from '../utils/ErrorApp';\nimport StatusCode from '../utils/StatusCode';\nimport { isArray, isObject, deepCopy } from '../utils/utils';\nimport RouteDecorators from './RouteDecorators';\n\n\nexport default class Route {\n  /**\n   * @type {boolean}\n   */\n  static displayLog = true;\n  static StatusCode = StatusCode;\n\n  /**\n   * @typedef {Object} Params\n   * @property {Object.<string, boolean | PostParamsFilter>} params the params describing the route's middlewares,\n   *                                                                with the key being the param's name,\n   *                                                                and the value describes the way it should be handled.\n   *                                                                (only applicable for requests containing a body)\n   * @property {string} path the path at which the route will be available.\n   * @property {string} routeBase a prefix which will be preppended to the route's path\n   * @property {boolean} disabled if set to true, the route will be ignored\n   * @property {function[]} middlewares an array of Koa Middlewares, which will be mounted for the given route\n   * @property {Object} rateLimit a rateLimit object, which lets the user describe the max rate at which a user can access the route\n   */\n\n  /**\n   * @typedef {Object} PostParamsFilter\n   * @property {ParamMiddlewareFunction[]} __func an array of functions which provides \"middleware\" functions that will be applied to the corresponding parameter one by one.\n   * @property {boolean} __force whether the parameter is required or not.\n   */\n\n  /**\n   * @typedef {function} ParamMiddlewareFunction\n   * @param {*} elem the element the function will act upon\n   * @param {Route} [route] the element's current route\n   * @param {{ctx: KoaContext, body:Object, keyBody:string}} [context] the element's context\n   * @return {*} transformedParam the parameter, after being manipulated by the function\n   */\n\n  /**\n   * @typedef {Object} RouteParams\n   * @property {Koa} app the Koa application\n   * @property {string} prefix a prefix which will be preppended before every route's paths\n   * @property {Route[]} routes an array containing all the mounted Routes\n   * @property {Model[]} [models] an array containing all of the app's models\n   * @property {string} [model] the name of the route's own model\n   * @property {disable} [boolean] whether the route should be disabled\n   *\n   */\n\n   /**\n    * @typedef {function} Decorator\n    * @return { }\n    */\n\n  /**\n   * @external {KoaContext} http://koajs.com/#api\n   */\n\n   /**\n    * @external {Koa} http://koajs.com/#application\n    */\n\n   /**\n    * @param {RouteParams} params the route's parameters\n    */\n  constructor({ app, prefix, routes, models, model, disable }) {\n    /**\n     * @type {Koa}\n     * @desc the main Koa application\n     */\n    this.app = app;\n    /**\n     * @type {string}\n     * @desc the route's prefix\n     */\n    this.prefix = prefix;\n    /**\n     * @type {Route[]}\n     * @desc an array composed of all the availble routes in the application\n     */\n    this.allRoutesInstance = routes;\n    /**\n     * @type {Model[]}\n     * @desc an array of all the models available in the application\n     */\n    this.models = models;\n    /**\n     * @type {boolean}\n     * @desc whether the route should be disabled. disabled routes cannot be called.\n     */\n    this.disable = disable != null ? disable : this.disable;\n    /**\n     * @type {function[]}\n     * @desc the route's registered middlewares\n     */\n    this.middlewares = this.middlewares || [];\n    if (this.models && model) {\n      /**\n       * @type {Model|undefined}\n       * @desc the route's own model\n       */\n      this.model = this.models[model];\n    }\n    /**\n     * @type {KoaRouter}\n     * @desc the underlying koa router for this particular route\n     */\n\n    this.koaRouter = new KoaRouter();\n    /**\n     * @ignore\n     */\n    this.privateKeyInParamsRoute = ['__force', '__func'];\n    // This Variable are set by RouteDecorators\n    this.routes;\n    this.routeBase;\n  }\n\n\n /**\n  * @access public\n  * @desc mounts the tagged function as a GET route.\n  * @param {Params} params the route's parameters\n  * @return {Decorator}\n  */\n  static Get = RouteDecorators.Get;\n\n /**\n  * @access public\n  * @desc mounts the tagged function as a POST route.\n  * @param {Params} params the route's parameters\n  * @return {Decorator}\n  */\n  static Post = RouteDecorators.Post;\n\n /**\n  * @access public\n  * @desc mounts the tagged function as a PUT route.\n  * @param {Params} params the route's parameters\n  * @return {Decorator}\n  */\n  static Put = RouteDecorators.Put;\n\n /**\n  * @access public\n  * @desc mounts the tagged function as a PATCH route.\n  * @param {Params} params the route's parameters\n  * @return {Decorator}\n  */\n  static Patch = RouteDecorators.Patch;\n\n /**\n  * @access public\n  * @desc mounts the tagged function as a DELETE route.\n  * @param {Params} params the route's parameters\n  * @return {Decorator}\n  */\n  static Delete = RouteDecorators.Delete;\n\n /**\n  * @access public\n  * @desc used to set some parameters on an entire class.The supported parameters are middlewares, disable, and routeBase.\n  * @return {Decorator}\n  * @param {Params} params the route's parameters\n  */\n  static Route = RouteDecorators.Route;\n\n  /**\n   * logs a message, but only if the route's logs are set to be displayed.\n   *\n   * accepts several parameters\n   */\n  log(str, ...args) {\n    if (Route.displayLog) {\n      console.log(str, ...args);\n    }\n  }\n\n  /**\n   * @access public\n   * @desc Registers the route and makes it callable once the API is launched.\n   *       the route will be called along with the middlewares that were registered in the decorator.\n   *\n   *       you will usually not need to call this method yourself.\n   */\n  mount() {\n    if (this.disable !== true) {\n      for (const type in this.routes) { // eslint-disable-line\n        for (const route of this.routes[type]) {\n          const routePath = `/${this.prefix}/${this.routeBase}/${route.path}`.replace(/[/]{2,10}/g, '/');\n          route.options.routePath = routePath;\n          route.options.type = type;\n          if (!route.options.disable) {\n            this.log(chalk.green.bold('[Mount route]'), `\\t${type}\\t`, routePath);\n            this.koaRouter[type](routePath, ...this._use(route));\n          } else {\n            this.log(chalk.yellow.bold('[Disable Mount route]\\t'), type, routePath);\n          }\n        }\n      }\n    } else {\n      this.log(chalk.yellow.bold(`Routes \"${this.routeBase}\" of class ${this.constructor.name} are't add`));\n    }\n  }\n\n  // ************************************ MIDDLEWARE *********************************\n  /**\n   *@ignore\n   */\n   _use(infos) {\n    const { options = {} } = infos;\n    const { middlewares = [] } = options;\n\n    const middlewaresToAdd = [this._beforeRoute(infos)];\n    middlewaresToAdd.push(...this.middlewares); // add middlewares of the class\n    middlewaresToAdd.push(...middlewares); // add middlewares of the specific route\n    this.addRateLimit(middlewaresToAdd, infos);\n    middlewaresToAdd.push(infos.call.bind(this));\n\n    return middlewaresToAdd;\n  }\n\n  /**\n   *@ignore\n   */\n  getRateLimit(option, routePath, type) {\n    option.interval = RateLimit.RateLimit.timeToMs(option.interval);\n    return RateLimit.middleware({\n      prefixKey: `${type}|${routePath}|${option.interval}`,\n      ...option,\n    });\n  }\n\n  /**\n   * if a decorator has a rateLimit property, it will add the rate limiting mechanism to the route,\n   * with a unique ID for each route in order to differentiate the various routes.\n   *\n   * You should not need to call this method directly.\n   * @param {function[]} middlewares the array of currently registered middlewares for the given route\n   * @param {{options:{rateLimit:Object,routePath:string,type:string}}} params the route's parameters\n   */\n  addRateLimit(middlewares, { options }) {\n    const { rateLimit, routePath, type } = options;\n\n    if (rateLimit) {\n      if (Array.isArray(rateLimit)) {\n        for (const elem of rateLimit) {\n          middlewares.push(this.getRateLimit(elem, routePath, type));\n        }\n      } else {\n        middlewares.push(this.getRateLimit(rateLimit, routePath, type));\n      }\n    }\n  }\n\n  // beforeRoute\n  /**\n   *@ignore\n   */\n  _beforeRoute(infos) {\n    return async (ctx, next) => await this.beforeRoute(ctx, infos, next);\n  }\n\n  /**\n   * @desc a member which can be overriden, which will always be executed before the route is accessed\n   * @param {KoaContext} ctx Koa's context object\n   * @param {Params} params an object containing all route parameters\n   * @param {function} next the next middleware in the chain\n   */\n  async beforeRoute(ctx, { options }, next) {\n    this._mlParams(ctx, options);\n    if (next) {\n      await next();\n    }\n  }\n\n  // test params\n  /**\n   *@ignore\n   */\n  _mlParams(ctx, { params }) {\n    ctx.request.bodyOrig = deepCopy(ctx.request.body);\n    ctx.request.body = this._mlTestParams(ctx, ctx.request.body, params);\n  }\n\n  /**\n   *@ignore\n   */\n  _mlParamsExecFunc(ctx, body, keyBody, param) {\n    if (body && body[keyBody]) {\n      const { __func } = param;\n      if (__func && Array.isArray(__func)) {\n        for (const func of __func) {\n          body[keyBody] = func(body[keyBody], this, { ctx, body, keyBody });\n        }\n      }\n    }\n  }\n\n  /**\n   *@ignore\n   */\n  _mlTestParams(ctx, body, paramsTest) {\n    const bodyVerif = {};\n    const paramsConvert = this._paramsNormalize(paramsTest);\n    for (const key in paramsConvert) {\n      const param = paramsConvert[key];\n\n      const bodyElem = body ? body[key] : undefined;\n      // test param\n      if (param.__force && (bodyElem === undefined || bodyElem === null)) {\n        this.throw(400, `${ctx.state.__ ? ctx.state.__('param required:') : 'param required:'} ${key}`);\n      }\n      this._mlParamsExecFunc(ctx, body, key, param);\n\n\n      if (this._paramsHasSubElement(param)) {\n        if (body && isObject(body)) {\n          const tmp = this._mlTestParams(ctx, body[key], param);\n          if (body[key]) {\n            bodyVerif[key] = tmp;\n          }\n        } else {\n          const tmp = this._mlTestParams(ctx, undefined, param);\n          if (body && isObject(body) && body[key] !== undefined) {\n            bodyVerif[key] = tmp;\n          }\n        }\n      } else if (body && isObject(body) && body[key] !== undefined) {\n        bodyVerif[key] = body[key];\n      }\n    }\n    return bodyVerif;\n  }\n\n  /**\n   *@ignore\n   */\n  _paramsNormalize(paramsTest) {\n    let paramsConvert = {};\n    // convert array to object\n    if (isArray(paramsTest)) {\n      for (const elem of paramsTest) {\n        if (isObject(elem, false)) {\n          paramsConvert = Object.assign(paramsConvert, elem);\n        } else {\n          paramsConvert[elem] = false;\n        }\n      }\n    } else {\n      paramsConvert = paramsTest;\n    }\n\n    // normalize objects\n    for (const key in paramsConvert) {\n      const elem = paramsConvert[key];\n      if (!this.privateKeyInParamsRoute.includes(key)) {\n        if (isObject(elem) || isArray(elem)) {\n          paramsConvert[key] = this._paramsNormalize(elem);\n        } else if (elem === false || elem === true) {\n          paramsConvert[key] = { __force: elem };\n        }\n      }\n    }\n    return paramsConvert;\n  }\n\n  /**\n   *@ignore\n   */\n  _paramsHasSubElement(paramsTest) {\n    for (const key in paramsTest) {\n      if (!this.privateKeyInParamsRoute.includes(key)) {\n        return true;\n      }\n    }\n    return false;\n  }\n\n  // ************************************ !MIDDLEWARE *********************************\n\n  /**\n   *@desc retrieves the context's body, if the request has one.\n   *@param {KoaContext} ctx koa's context object\n   *@param {boolean} [original=false] if set to true, the function will return the body before it is filtered by the param decorator.\n   *                                  otherwise, it will return the filtered and transformed body.\n   */\n  body(ctx, original = false) {\n    return original ? ctx.request.bodyOrig : ctx.request.body;\n  }\n\n  /**\n   * @access public\n   * @desc retrieves the query params in a GET request\n   * @param {KoaContext} ctx koa's context object\n   * @return {Object.<string, *>}\n   */\n  bodyGet(ctx) {\n    return ctx.request.query || {};\n  }\n\n  /**\n   * @access public\n   * @desc alias of {@link bodyGet}\n   * @param {KoaContext} ctx koa's context object\n   * @return {Object.<string, *>}\n   */\n  paramsGet(ctx) { return this.bodyGet(ctx); }\n\n  /**\n   * @access public\n   * @desc sets the response's body (with a message + data field) and status.\n   * @param {KoaContext} ctx koa's context object\n   * @param {number} [status] the HTTP status code to end the request with\n   * @param {*} [data] the data to be yielded by the requests\n   * @param {string} [message] the message to be yielded by the request\n   * @return { }\n   */\n  send(ctx, status = 200, data, message) {\n    ctx.body = ctx.body || {}; // add default body\n    ctx.status = status;\n    // Do not remove this test because if status = 204 || 304, node will remove body\n    // see _hasBody on\n    // https://github.com/nodejs/node/blob/master/lib/_http_server.js#L235-L250\n    if (ctx.body) {\n      if (data != null) {\n        ctx.body.data = data;\n      }\n      if (message != null) {\n        ctx.body.message = message;\n      }\n      ctx.body.date = Date.now();\n    }\n  }\n\n  /**\n   * @access public\n   * @desc same as {@link send}, but automatically sets the status to 200 OK\n   * @param {KoaContext} ctx koa's context object\n   * @param {*} [data] the data to be yielded by the requests\n   * @param {string} [message] the message to be yielded by the request\n   * @return { }\n   */\n  sendOk(ctx, data, message) {\n    return this.send(ctx, Route.StatusCode.ok, data, message);\n  }\n\n  /**\n   * @access public\n   * @desc same as {@link send}, but automatically sets the status to 201 CREATED\n   * @param {KoaContext} ctx koa's context object\n   * @param {*} [data] the data to be yielded by the requests\n   * @param {string} [message] the message to be yielded by the request\n   * @return { }\n   */\n  sendCreated(ctx, data, message) {\n    return this.send(ctx, Route.StatusCode.created, data, message);\n  }\n\n  /**\n   * @access public\n   * @desc replies with an empty body, yielding 204 NO CONTENT as the status\n   * @param {KoaContext} ctx koa's context object\n   * @return { }\n   */\n  sendNoContent(ctx) {\n    return this.send(ctx, Route.StatusCode.noContent);\n  }\n\n  /**\n   * @access public\n   * @desc same as {@link send}, but automatically sets the status to 400 BAD REQUEST\n   * @param {KoaContext} ctx koa's context object\n   * @param {*} [data] the data to be yielded by the requests\n   * @param {string} [message] the message to be yielded by the request\n   * @return { }\n   */\n  sendBadRequest(ctx, data, message) {\n    return this.send(ctx, Route.StatusCode.badRequest, data, message);\n  }\n\n  /**\n   * @access public\n   * @desc same as {@link send}, but automatically sets the status to 401 UNAUTHORIZED\n   * @param {KoaContext} ctx koa's context object\n   * @param {*} [data] the data to be yielded by the requests\n   * @param {string} [message] the message to be yielded by the request\n   * @return { }\n   */\n  sendUnauthorized(ctx, data, message) {\n    return this.send(ctx, Route.StatusCode.unauthorized, data, message);\n  }\n\n  /**\n   * @access public\n   * @desc same as {@link send}, but automatically sets the status to 403 FORBIDDEN\n   * @param {KoaContext} ctx koa's context object\n   * @param {*} [data] the data to be yielded by the requests\n   * @param {string} [message] the message to be yielded by the request\n   * @return { }\n   */\n  sendForbidden(ctx, data, message) {\n    return this.send(ctx, Route.StatusCode.forbidden, data, message);\n  }\n\n  /**\n   * @access public\n   * @desc same as {@link send}, but automatically sets the status to 404 NOT FOUND\n   * @param {KoaContext} ctx koa's context object\n   * @param {*} [data] the data to be yielded by the requests\n   * @param {string} [message] the message to be yielded by the request\n   * @return { }\n   */\n  sendNotFound(ctx, data, message) {\n    return this.send(ctx, Route.StatusCode.notFound, data, message);\n  }\n\n  /**\n   * @access public\n   * @desc same as {@link send}, but automatically sets the status to 500 INTERNAL SERVER ERROR\n   * @param {KoaContext} ctx koa's context object\n   * @param {*} [data] the data to be yielded by the requests\n   * @param {string} [message] the message to be yielded by the request\n   * @return { }\n   */\n  sendInternalServerError(ctx, data, message) {\n    return this.send(ctx, Route.StatusCode.internalServerError, data, message);\n  }\n\n  /**\n   * @access public\n   * @desc throws a formated error to be caught.\n   * @param {number} status the error's HTTP status StatusCode\n   * @param {string} message  a message describing the error\n   * @param {boolean} translate indicates whether the message should be translated or not\n   * @throws {ErrorApp} thrown error.\n   * @return { }\n   */\n  throw(status, message, translate = false) {\n    throw new ErrorApp(status, message, translate);\n  }\n\n  /**\n   * @access public\n   * @desc checks a condition. If it evaluates to false, throws a formated error to be caught.\n   * @param {boolean} condition if set to false; assert will fail and throw.\n   * @param {number} status the error's HTTP status StatusCode\n   * @param {string} message  a message describing the error\n   * @param {boolean} translate indicates whether the message should be translated or not\n   * @throws {ErrorApp} thrown error, should the assert fail.\n   * @return { }\n   */\n  assert(condition, status, message, translate = false) {\n    if (!condition) {\n      this.throw(status, message, translate);\n    }\n  }\n}\n",
    "static": true,
    "longname": "/home/elkaim_r/Project/koa-smart/src/routes/Route.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 21,
    "kind": "class",
    "name": "Route",
    "memberof": "src/routes/Route.js",
    "static": true,
    "longname": "src/routes/Route.js~Route",
    "access": "public",
    "export": true,
    "importPath": "koa-smart/src/routes/Route.js",
    "importStyle": "Route",
    "description": null,
    "lineNumber": 11,
    "undocument": true,
    "interface": false
  },
  {
    "__docId__": 22,
    "kind": "member",
    "name": "displayLog",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.displayLog",
    "access": "public",
    "description": "",
    "lineNumber": 15,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 23,
    "kind": "member",
    "name": "StatusCode",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.StatusCode",
    "access": "public",
    "description": null,
    "lineNumber": 16,
    "undocument": true,
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 24,
    "kind": "typedef",
    "name": "Params",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.Params",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Object.<string, boolean | PostParamsFilter>"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "the params describing the route's middlewares,\n                                                               with the key being the param's name,\n                                                               and the value describes the way it should be handled.\n                                                               (only applicable for requests containing a body)"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "path",
        "description": "the path at which the route will be available."
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "routeBase",
        "description": "a prefix which will be preppended to the route's path"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "disabled",
        "description": "if set to true, the route will be ignored"
      },
      {
        "nullable": null,
        "types": [
          "function[]"
        ],
        "spread": false,
        "optional": false,
        "name": "middlewares",
        "description": "an array of Koa Middlewares, which will be mounted for the given route"
      },
      {
        "nullable": null,
        "types": [
          "Object"
        ],
        "spread": false,
        "optional": false,
        "name": "rateLimit",
        "description": "a rateLimit object, which lets the user describe the max rate at which a user can access the route"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "Params"
    }
  },
  {
    "__docId__": 25,
    "kind": "typedef",
    "name": "PostParamsFilter",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.PostParamsFilter",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "ParamMiddlewareFunction[]"
        ],
        "spread": false,
        "optional": false,
        "name": "__func",
        "description": "an array of functions which provides \"middleware\" functions that will be applied to the corresponding parameter one by one."
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "__force",
        "description": "whether the parameter is required or not."
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "PostParamsFilter"
    }
  },
  {
    "__docId__": 26,
    "kind": "typedef",
    "name": "ParamMiddlewareFunction",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.ParamMiddlewareFunction",
    "access": "public",
    "description": "",
    "params": [
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": false,
        "name": "elem",
        "description": "the element the function will act upon"
      },
      {
        "nullable": null,
        "types": [
          "Route"
        ],
        "spread": false,
        "optional": true,
        "name": "route",
        "description": "the element's current route"
      },
      {
        "nullable": null,
        "types": [
          "{ctx: KoaContext, body:Object, keyBody:string}"
        ],
        "spread": false,
        "optional": true,
        "name": "context",
        "description": "the element's context"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "*"
      ],
      "spread": false,
      "description": "transformedParam the parameter, after being manipulated by the function"
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "ParamMiddlewareFunction"
    }
  },
  {
    "__docId__": 27,
    "kind": "typedef",
    "name": "RouteParams",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.RouteParams",
    "access": "public",
    "description": "",
    "properties": [
      {
        "nullable": null,
        "types": [
          "Koa"
        ],
        "spread": false,
        "optional": false,
        "name": "app",
        "description": "the Koa application"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "prefix",
        "description": "a prefix which will be preppended before every route's paths"
      },
      {
        "nullable": null,
        "types": [
          "Route[]"
        ],
        "spread": false,
        "optional": false,
        "name": "routes",
        "description": "an array containing all the mounted Routes"
      },
      {
        "nullable": null,
        "types": [
          "Model[]"
        ],
        "spread": false,
        "optional": true,
        "name": "models",
        "description": "an array containing all of the app's models"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "model",
        "description": "the name of the route's own model"
      },
      {
        "nullable": null,
        "types": [
          "disable"
        ],
        "spread": false,
        "optional": true,
        "name": "boolean",
        "description": "whether the route should be disabled"
      }
    ],
    "type": {
      "types": [
        "Object"
      ],
      "optional": false,
      "name": "RouteParams"
    }
  },
  {
    "__docId__": 28,
    "kind": "typedef",
    "name": "Decorator",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.Decorator",
    "access": "public",
    "description": "",
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "function"
      ],
      "optional": false,
      "name": "Decorator"
    }
  },
  {
    "__docId__": 29,
    "kind": "external",
    "name": "KoaContext",
    "externalLink": "http://koajs.com/#api",
    "memberof": "src/routes/Route.js",
    "static": true,
    "longname": "src/routes/Route.js~KoaContext",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 30,
    "kind": "external",
    "name": "Koa",
    "externalLink": "http://koajs.com/#application",
    "memberof": "src/routes/Route.js",
    "static": true,
    "longname": "src/routes/Route.js~Koa",
    "access": "public",
    "description": ""
  },
  {
    "__docId__": 31,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#constructor",
    "access": "public",
    "description": "",
    "lineNumber": 72,
    "params": [
      {
        "nullable": null,
        "types": [
          "RouteParams"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "the route's parameters"
      }
    ]
  },
  {
    "__docId__": 32,
    "kind": "member",
    "name": "app",
    "memberof": "src/routes/Route.js~Route",
    "static": false,
    "longname": "src/routes/Route.js~Route#app",
    "access": "public",
    "description": "the main Koa application",
    "lineNumber": 77,
    "type": {
      "nullable": null,
      "types": [
        "Koa"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 33,
    "kind": "member",
    "name": "prefix",
    "memberof": "src/routes/Route.js~Route",
    "static": false,
    "longname": "src/routes/Route.js~Route#prefix",
    "access": "public",
    "description": "the route's prefix",
    "lineNumber": 82,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 34,
    "kind": "member",
    "name": "allRoutesInstance",
    "memberof": "src/routes/Route.js~Route",
    "static": false,
    "longname": "src/routes/Route.js~Route#allRoutesInstance",
    "access": "public",
    "description": "an array composed of all the availble routes in the application",
    "lineNumber": 87,
    "type": {
      "nullable": null,
      "types": [
        "Route[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 35,
    "kind": "member",
    "name": "models",
    "memberof": "src/routes/Route.js~Route",
    "static": false,
    "longname": "src/routes/Route.js~Route#models",
    "access": "public",
    "description": "an array of all the models available in the application",
    "lineNumber": 92,
    "type": {
      "nullable": null,
      "types": [
        "Model[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 36,
    "kind": "member",
    "name": "disable",
    "memberof": "src/routes/Route.js~Route",
    "static": false,
    "longname": "src/routes/Route.js~Route#disable",
    "access": "public",
    "description": "whether the route should be disabled. disabled routes cannot be called.",
    "lineNumber": 97,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 37,
    "kind": "member",
    "name": "middlewares",
    "memberof": "src/routes/Route.js~Route",
    "static": false,
    "longname": "src/routes/Route.js~Route#middlewares",
    "access": "public",
    "description": "the route's registered middlewares",
    "lineNumber": 102,
    "type": {
      "nullable": null,
      "types": [
        "function[]"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 38,
    "kind": "member",
    "name": "model",
    "memberof": "src/routes/Route.js~Route",
    "static": false,
    "longname": "src/routes/Route.js~Route#model",
    "access": "public",
    "description": "the route's own model",
    "lineNumber": 108,
    "type": {
      "nullable": null,
      "types": [
        "Model",
        "undefined"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 39,
    "kind": "member",
    "name": "koaRouter",
    "memberof": "src/routes/Route.js~Route",
    "static": false,
    "longname": "src/routes/Route.js~Route#koaRouter",
    "access": "public",
    "description": "the underlying koa router for this particular route",
    "lineNumber": 115,
    "type": {
      "nullable": null,
      "types": [
        "KoaRouter"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 40,
    "kind": "member",
    "name": "privateKeyInParamsRoute",
    "memberof": "src/routes/Route.js~Route",
    "static": false,
    "longname": "src/routes/Route.js~Route#privateKeyInParamsRoute",
    "access": "public",
    "description": "",
    "lineNumber": 119,
    "ignore": true,
    "type": {
      "types": [
        "string[]"
      ]
    }
  },
  {
    "__docId__": 41,
    "kind": "member",
    "name": "Get",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.Get",
    "access": "public",
    "description": "mounts the tagged function as a GET route.",
    "lineNumber": 132,
    "params": [
      {
        "nullable": null,
        "types": [
          "Params"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "the route's parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decorator"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 42,
    "kind": "member",
    "name": "Post",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.Post",
    "access": "public",
    "description": "mounts the tagged function as a POST route.",
    "lineNumber": 140,
    "params": [
      {
        "nullable": null,
        "types": [
          "Params"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "the route's parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decorator"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 43,
    "kind": "member",
    "name": "Put",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.Put",
    "access": "public",
    "description": "mounts the tagged function as a PUT route.",
    "lineNumber": 148,
    "params": [
      {
        "nullable": null,
        "types": [
          "Params"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "the route's parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decorator"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 44,
    "kind": "member",
    "name": "Patch",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.Patch",
    "access": "public",
    "description": "mounts the tagged function as a PATCH route.",
    "lineNumber": 156,
    "params": [
      {
        "nullable": null,
        "types": [
          "Params"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "the route's parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decorator"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 45,
    "kind": "member",
    "name": "Delete",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.Delete",
    "access": "public",
    "description": "mounts the tagged function as a DELETE route.",
    "lineNumber": 164,
    "params": [
      {
        "nullable": null,
        "types": [
          "Params"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "the route's parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decorator"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 46,
    "kind": "member",
    "name": "Route",
    "memberof": "src/routes/Route.js~Route",
    "static": true,
    "longname": "src/routes/Route.js~Route.Route",
    "access": "public",
    "description": "used to set some parameters on an entire class.The supported parameters are middlewares, disable, and routeBase.",
    "lineNumber": 172,
    "params": [
      {
        "nullable": null,
        "types": [
          "Params"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "the route's parameters"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Decorator"
      ],
      "spread": false,
      "description": ""
    },
    "type": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 47,
    "kind": "method",
    "name": "log",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#log",
    "access": "public",
    "description": "logs a message, but only if the route's logs are set to be displayed.\n\naccepts several parameters",
    "lineNumber": 179,
    "params": [
      {
        "name": "str",
        "types": [
          "*"
        ]
      },
      {
        "name": "args",
        "types": [
          "...*"
        ],
        "spread": true
      }
    ],
    "return": null
  },
  {
    "__docId__": 48,
    "kind": "method",
    "name": "mount",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#mount",
    "access": "public",
    "description": "Registers the route and makes it callable once the API is launched.\n      the route will be called along with the middlewares that were registered in the decorator.\n\n      you will usually not need to call this method yourself.",
    "lineNumber": 192,
    "params": [],
    "return": null
  },
  {
    "__docId__": 49,
    "kind": "method",
    "name": "_use",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#_use",
    "access": "private",
    "description": "",
    "lineNumber": 216,
    "ignore": true,
    "params": [
      {
        "name": "infos",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 50,
    "kind": "method",
    "name": "getRateLimit",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#getRateLimit",
    "access": "public",
    "description": "",
    "lineNumber": 232,
    "ignore": true,
    "params": [
      {
        "name": "option",
        "types": [
          "*"
        ]
      },
      {
        "name": "routePath",
        "types": [
          "*"
        ]
      },
      {
        "name": "type",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 51,
    "kind": "method",
    "name": "addRateLimit",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#addRateLimit",
    "access": "public",
    "description": "if a decorator has a rateLimit property, it will add the rate limiting mechanism to the route,\nwith a unique ID for each route in order to differentiate the various routes.\n\nYou should not need to call this method directly.",
    "lineNumber": 248,
    "params": [
      {
        "nullable": null,
        "types": [
          "function[]"
        ],
        "spread": false,
        "optional": false,
        "name": "middlewares",
        "description": "the array of currently registered middlewares for the given route"
      },
      {
        "nullable": null,
        "types": [
          "{options:{rateLimit:Object,routePath:string,type:string}}"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "the route's parameters"
      }
    ],
    "return": null
  },
  {
    "__docId__": 52,
    "kind": "method",
    "name": "_beforeRoute",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#_beforeRoute",
    "access": "private",
    "description": "",
    "lineNumber": 266,
    "ignore": true,
    "params": [
      {
        "name": "infos",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 53,
    "kind": "method",
    "name": "beforeRoute",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": true,
    "static": false,
    "longname": "src/routes/Route.js~Route#beforeRoute",
    "access": "public",
    "description": "a member which can be overriden, which will always be executed before the route is accessed",
    "lineNumber": 276,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "Koa's context object"
      },
      {
        "nullable": null,
        "types": [
          "Params"
        ],
        "spread": false,
        "optional": false,
        "name": "params",
        "description": "an object containing all route parameters"
      },
      {
        "nullable": null,
        "types": [
          "function"
        ],
        "spread": false,
        "optional": false,
        "name": "next",
        "description": "the next middleware in the chain"
      }
    ],
    "return": null
  },
  {
    "__docId__": 54,
    "kind": "method",
    "name": "_mlParams",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#_mlParams",
    "access": "private",
    "description": "",
    "lineNumber": 287,
    "ignore": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "objectPattern1",
        "types": [
          "{\"params\": *}"
        ],
        "defaultRaw": {
          "params": null
        },
        "defaultValue": "{\"params\":null}"
      }
    ],
    "return": null
  },
  {
    "__docId__": 55,
    "kind": "method",
    "name": "_mlParamsExecFunc",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#_mlParamsExecFunc",
    "access": "private",
    "description": "",
    "lineNumber": 295,
    "ignore": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "body",
        "types": [
          "*"
        ]
      },
      {
        "name": "keyBody",
        "types": [
          "*"
        ]
      },
      {
        "name": "param",
        "types": [
          "*"
        ]
      }
    ],
    "return": null
  },
  {
    "__docId__": 56,
    "kind": "method",
    "name": "_mlTestParams",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#_mlTestParams",
    "access": "private",
    "description": "",
    "lineNumber": 309,
    "ignore": true,
    "params": [
      {
        "name": "ctx",
        "types": [
          "*"
        ]
      },
      {
        "name": "body",
        "types": [
          "*"
        ]
      },
      {
        "name": "paramsTest",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 57,
    "kind": "method",
    "name": "_paramsNormalize",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#_paramsNormalize",
    "access": "private",
    "description": "",
    "lineNumber": 345,
    "ignore": true,
    "params": [
      {
        "name": "paramsTest",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 58,
    "kind": "method",
    "name": "_paramsHasSubElement",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#_paramsHasSubElement",
    "access": "private",
    "description": "",
    "lineNumber": 377,
    "ignore": true,
    "params": [
      {
        "name": "paramsTest",
        "types": [
          "*"
        ]
      }
    ],
    "return": {
      "types": [
        "boolean"
      ]
    }
  },
  {
    "__docId__": 59,
    "kind": "method",
    "name": "body",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#body",
    "access": "public",
    "description": "retrieves the context's body, if the request has one.",
    "lineNumber": 394,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "koa's context object"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": true,
        "defaultValue": "false",
        "defaultRaw": false,
        "name": "original",
        "description": "if set to true, the function will return the body before it is filtered by the param decorator.\n                                 otherwise, it will return the filtered and transformed body."
      }
    ],
    "return": {
      "types": [
        "*"
      ]
    }
  },
  {
    "__docId__": 60,
    "kind": "method",
    "name": "bodyGet",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#bodyGet",
    "access": "public",
    "description": "retrieves the query params in a GET request",
    "lineNumber": 404,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "koa's context object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object.<string, *>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 61,
    "kind": "method",
    "name": "paramsGet",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#paramsGet",
    "access": "public",
    "description": "alias of {@link bodyGet}",
    "lineNumber": 414,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "koa's context object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        "Object.<string, *>"
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 62,
    "kind": "method",
    "name": "send",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#send",
    "access": "public",
    "description": "sets the response's body (with a message + data field) and status.",
    "lineNumber": 425,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "koa's context object"
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": true,
        "name": "status",
        "description": "the HTTP status code to end the request with"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "the data to be yielded by the requests"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "message",
        "description": "the message to be yielded by the request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 63,
    "kind": "method",
    "name": "sendOk",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#sendOk",
    "access": "public",
    "description": "same as {@link send}, but automatically sets the status to 200 OK",
    "lineNumber": 450,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "koa's context object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "the data to be yielded by the requests"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "message",
        "description": "the message to be yielded by the request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 64,
    "kind": "method",
    "name": "sendCreated",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#sendCreated",
    "access": "public",
    "description": "same as {@link send}, but automatically sets the status to 201 CREATED",
    "lineNumber": 462,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "koa's context object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "the data to be yielded by the requests"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "message",
        "description": "the message to be yielded by the request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 65,
    "kind": "method",
    "name": "sendNoContent",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#sendNoContent",
    "access": "public",
    "description": "replies with an empty body, yielding 204 NO CONTENT as the status",
    "lineNumber": 472,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "koa's context object"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 66,
    "kind": "method",
    "name": "sendBadRequest",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#sendBadRequest",
    "access": "public",
    "description": "same as {@link send}, but automatically sets the status to 400 BAD REQUEST",
    "lineNumber": 484,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "koa's context object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "the data to be yielded by the requests"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "message",
        "description": "the message to be yielded by the request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 67,
    "kind": "method",
    "name": "sendUnauthorized",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#sendUnauthorized",
    "access": "public",
    "description": "same as {@link send}, but automatically sets the status to 401 UNAUTHORIZED",
    "lineNumber": 496,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "koa's context object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "the data to be yielded by the requests"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "message",
        "description": "the message to be yielded by the request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 68,
    "kind": "method",
    "name": "sendForbidden",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#sendForbidden",
    "access": "public",
    "description": "same as {@link send}, but automatically sets the status to 403 FORBIDDEN",
    "lineNumber": 508,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "koa's context object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "the data to be yielded by the requests"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "message",
        "description": "the message to be yielded by the request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 69,
    "kind": "method",
    "name": "sendNotFound",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#sendNotFound",
    "access": "public",
    "description": "same as {@link send}, but automatically sets the status to 404 NOT FOUND",
    "lineNumber": 520,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "koa's context object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "the data to be yielded by the requests"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "message",
        "description": "the message to be yielded by the request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 70,
    "kind": "method",
    "name": "sendInternalServerError",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#sendInternalServerError",
    "access": "public",
    "description": "same as {@link send}, but automatically sets the status to 500 INTERNAL SERVER ERROR",
    "lineNumber": 532,
    "params": [
      {
        "nullable": null,
        "types": [
          "KoaContext"
        ],
        "spread": false,
        "optional": false,
        "name": "ctx",
        "description": "koa's context object"
      },
      {
        "nullable": null,
        "types": [
          "*"
        ],
        "spread": false,
        "optional": true,
        "name": "data",
        "description": "the data to be yielded by the requests"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": true,
        "name": "message",
        "description": "the message to be yielded by the request"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    }
  },
  {
    "__docId__": 71,
    "kind": "method",
    "name": "throw",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#throw",
    "access": "public",
    "description": "throws a formated error to be caught.",
    "lineNumber": 545,
    "params": [
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "the error's HTTP status StatusCode"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "a message describing the error"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "translate",
        "description": "indicates whether the message should be translated or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "ErrorApp"
        ],
        "description": "thrown error."
      }
    ]
  },
  {
    "__docId__": 72,
    "kind": "method",
    "name": "assert",
    "memberof": "src/routes/Route.js~Route",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/routes/Route.js~Route#assert",
    "access": "public",
    "description": "checks a condition. If it evaluates to false, throws a formated error to be caught.",
    "lineNumber": 559,
    "params": [
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "condition",
        "description": "if set to false; assert will fail and throw."
      },
      {
        "nullable": null,
        "types": [
          "number"
        ],
        "spread": false,
        "optional": false,
        "name": "status",
        "description": "the error's HTTP status StatusCode"
      },
      {
        "nullable": null,
        "types": [
          "string"
        ],
        "spread": false,
        "optional": false,
        "name": "message",
        "description": "a message describing the error"
      },
      {
        "nullable": null,
        "types": [
          "boolean"
        ],
        "spread": false,
        "optional": false,
        "name": "translate",
        "description": "indicates whether the message should be translated or not"
      }
    ],
    "return": {
      "nullable": null,
      "types": [
        " "
      ],
      "spread": false,
      "description": ""
    },
    "throws": [
      {
        "types": [
          "ErrorApp"
        ],
        "description": "thrown error, should the assert fail."
      }
    ]
  },
  {
    "__docId__": 73,
    "kind": "file",
    "name": "src/utils/ErrorApp.js",
    "content": "export default class ErrorApp extends Error {\n  constructor(status, message, toTranslate = false) {\n    super ();\n\n    /**\n     * @type {number}\n     */\n    this.status = status;\n\n    /**\n     * @type {string}\n     */\n    this.message = message;\n\n    /**\n     * @type {boolean}\n     */\n    this.toTranslate = toTranslate;\n\n    this.constructor = ErrorApp;\n  }\n}\n\nErrorApp.prototype = Error.prototype;\n",
    "static": true,
    "longname": "/home/elkaim_r/Project/koa-smart/src/utils/ErrorApp.js",
    "access": "public",
    "description": null,
    "lineNumber": 1
  },
  {
    "__docId__": 74,
    "kind": "class",
    "name": "ErrorApp",
    "memberof": "src/utils/ErrorApp.js",
    "static": true,
    "longname": "src/utils/ErrorApp.js~ErrorApp",
    "access": "public",
    "export": true,
    "importPath": "koa-smart/src/utils/ErrorApp.js",
    "importStyle": "ErrorApp",
    "description": null,
    "lineNumber": 1,
    "undocument": true,
    "interface": false,
    "extends": [
      "Error"
    ]
  },
  {
    "__docId__": 75,
    "kind": "constructor",
    "name": "constructor",
    "memberof": "src/utils/ErrorApp.js~ErrorApp",
    "generator": false,
    "async": false,
    "static": false,
    "longname": "src/utils/ErrorApp.js~ErrorApp#constructor",
    "access": "public",
    "description": null,
    "lineNumber": 2,
    "undocument": true
  },
  {
    "__docId__": 76,
    "kind": "member",
    "name": "status",
    "memberof": "src/utils/ErrorApp.js~ErrorApp",
    "static": false,
    "longname": "src/utils/ErrorApp.js~ErrorApp#status",
    "access": "public",
    "description": "",
    "lineNumber": 8,
    "type": {
      "nullable": null,
      "types": [
        "number"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 77,
    "kind": "member",
    "name": "message",
    "memberof": "src/utils/ErrorApp.js~ErrorApp",
    "static": false,
    "longname": "src/utils/ErrorApp.js~ErrorApp#message",
    "access": "public",
    "description": "",
    "lineNumber": 13,
    "type": {
      "nullable": null,
      "types": [
        "string"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "__docId__": 78,
    "kind": "member",
    "name": "toTranslate",
    "memberof": "src/utils/ErrorApp.js~ErrorApp",
    "static": false,
    "longname": "src/utils/ErrorApp.js~ErrorApp#toTranslate",
    "access": "public",
    "description": "",
    "lineNumber": 18,
    "type": {
      "nullable": null,
      "types": [
        "boolean"
      ],
      "spread": false,
      "description": null
    }
  },
  {
    "kind": "index",
    "content": "# **KoaSmart** is a framework based on **Koajs2**, which allows you to develop RESTful APIs with : **Class**, **Decorator**, **Params checker**\n\n[![Build Status](https://secure.travis-ci.org/ysocorp/koa-smart.png?branch=master \"Test\")](http://travis-ci.org/ysocorp/koa-smart)\n[![NPM version](http://badge.fury.io/js/koa-smart.png)](https://npmjs.org/package/koa-smart \"View this project on NPM\")\n\nA framework based on [Koajs2](https://github.com/koajs/koa) with **Decorator**, **Params checker** and a **base of modules** ([`cors`](https://www.npmjs.com/package/kcors), [`bodyparser`](https://github.com/koajs/bodyparser), [`compress`](https://github.com/koajs/compress), [`I18n`](https://github.com/koa-modules/i18n), etc... ) to allow you to develop a smart api easily\n```sh\n  export default class RouteUsers extends Route {\n\n    // get route: http://localhost:3000/users/get/:id\n    @Route.Get({\n      path: 'get/:id'\n    })\n    async get(ctx) {\n      const user = await this.models.users.findById(ctx.params.id);\n      this.assert(user, 404, ctx.state.__('User not found'));\n      this.sendOk(ctx, user);\n    }\n\n    // post route: http://localhost:3000/users/add\n    @Route.Post({\n      accesses: [Route.accesses.public],\n      params: { // params to allow: all other params will be rejected\n        email: true, // return an 400 if the body doesn't contain email key\n        name: false,\n      },\n    })\n    async add(ctx) {\n      const body = this.body(ctx); // or ctx.request.body\n      // body can contain only an object with email and name field\n      const user = await this.models.user.create(body);\n      this.sendCreated(ctx, user);\n    }\n\n  }\n```\n\n## Summary\n* What's in this framework ?\n* [Install](#install)\n* [Router with decorator](#router-with-decorator)\n* [Params checker of POST body](#params-checker-of-post-body)\n* [Get Started](#get-started)\n    * [Full example](#full-example)\n* [Add treatment on route](#add-treatment-on-route)\n\n## What is in this framework ?\n\n**This framework gives you the tools to use a set of modules: **\n\n* **For routing**\n    * [`koajs 2`](https://github.com/koajs/koa) as the main, underlying framework\n    * [`kcors`](https://www.npmjs.com/package/kcors) is used to handle cross-domain requests\n    * [`koa2-ratelimit`](https://github.com/ysocorp/koa2-ratelimit) To limit bruteforce requests\n    * [`koa-helmet`](https://www.npmjs.com/package/koa-helmet) helps you secure your api\n    * [`koa-bodyparser`](https://github.com/koajs/bodyparser) to parse request bodies\n    * [`koa-compress`](https://github.com/koajs/compress) to compress the response\n    * [`koa-i18n`](https://github.com/koa-modules/i18n) for Internationalization (I18n)\n* [`@Decorators`](https://babeljs.io/docs/plugins/transform-decorators/) to ensure a better project structure\n* [`moment`](https://github.com/moment/moment) Parse, validate, manipulate, and display dates in javascript.\n* [`lodash`](https://github.com/lodash/lodash) A modern JavaScript utility library delivering modularity, performance, & extras\n* [`jsonwebtoken`](https://github.com/auth0/node-jsonwebtoken) an implementation of [JSON Web Tokens JWT](https://tools.ietf.org/html/rfc7519)\n\nthe full documentation for this module can be found [here](https://ysocorp.github.io/koa-smart/)\n\n## Install\n`npm install koa-smart`\n\n## Router with decorator\n\n**All routes have to extend the `Route` class in order to be mount**\n\n* **Prefix of routes**\n\n    If you have a route class with the name `RouteMyApi`, all the routes inside said class will be **preceded** by **`/my-api/`**\n\n    * How does it work ?\n        1) the `Route` word is removed\n        2) uppercase letters are replaced with '-'. (essentially converting camelCase into camel-case)\n        **e.g.**: this will add a get route => http://localhost:3000/my-api/hello\n\n      ```sh\n      export default class RouteMyApi extends Route {\n\n          @Route.Get({})\n          async hello(ctx) {\n              this.sendOk(ctx, ctx.state.__('hello'));\n          }\n\n      }\n      ```\n\n    * Change prefix of all routes in the class: http://localhost:3000/my-prefix/hello\n      ```sh\n      @Route.Route({\n          routeBase: 'my-prefix',\n      })\n      export default class RouteMyApi extends Route {\n\n          @Route.Get({})\n          async hello(ctx) {\n              this.sendOk(ctx, ctx.state.__('hello'));\n          }\n\n      }\n      ```\n\n* **Get route** http://localhost:3000/my-api/hello\n\n  ```sh\n    @Route.Get({})\n    async hello(ctx) {\n      this.sendOk(ctx, null, ctx.state.__('hello'));\n    }\n  ```\n* **Change path** http://localhost:3000/my-api/myroute/15\n\n  ```sh\n    @Route.Get({\n      path: '/myroute/:id'\n    })\n    async hello(ctx) {\n      this.sendOk(ctx, ctx.state.__('hello') + ctx.params.id);\n    }\n  ```\n\n* **Post route** http://localhost:3000/my-api/user-post\n  ```sh\n    @Route.Post({\n        params: { // params to allow: all other params will be rejected\n            email: true, // return a 400 error if the body doesn't contain email key\n            name: false, // optional parameter\n        },\n    })\n    async userPost(ctx) {\n      const body = this.body(ctx);\n      // body can contain only an object with email and name field\n      const user = await this.models.user.create(body);\n      this.sendCreated(ctx, user);\n    }\n  ```\n\n* **Disable route**\n    * **Disable all routes in a class**\n\n    to disable all routes in a class you should add `disable` in the content of your decorator class\n\n    ```sh\n    @Route.Route({\n        disable: true,\n    })\n    export default class RouteMyApi extends Route {\n        // All routes in this class will not be mounted\n    }\n    ```\n\n    * **Disable a specific route**\n\n    to disable a specific route you can add `disable` in the content of your decorator\n\n    ```sh\n    @Route.Get({\n        disable: true, // this route will not be mounted\n    })\n    async hello(ctx) {\n      this.sendOk(ctx, null, ctx.state.__('hello'));\n    }\n    ```\n\n* **RateLimit** : For more infos, see the [`koa2-ratelimit`](https://github.com/ysocorp/koa2-ratelimit) module\n\n  * **Configure**\n\n    ```sh\n    import { App } from 'koa-smart';\n    import { RateLimit, RateLimitStores } from 'koa-smart/middlewares';\n\n    const app = new App({ port: 3000 });\n\n    // Set Default Option\n    const store = new RateLimitStores.Memory() OR new RateLimitStores.Sequelize(sequelizeInstance)\n    RateLimit.defaultOptions({\n        message: 'Too many requests, get out!',\n        store: store, // By default it will create MemoryStore\n    });\n\n    // limit 100 accesses per min on your API\n    app.addMiddlewares([\n      // ...\n      RateLimit.middleware({ interval: { min: 1 }, max: 100 }),\n      // ...\n    ]);\n    ```\n\n  * **RateLimit On Decorator**\n\n    Single RateLimit\n\n    ```sh\n    @Route.Get({ // allow only 100 requests per day to /view\n        rateLimit: { interval: { day: 1 }, max: 100 },\n    })\n    async view(ctx) {\n      this.sendOk(ctx, null, ctx.state.__('hello'));\n    }\n    ```\n\n    Multiple RateLimit\n\n    ```sh\n    // Multiple RateLimit\n    @Route.Get({\n        rateLimit: [\n            { interval: { day: 1 }, max: 100 }, // allow only 100 requests per day\n            { interval: { min: 2 }, max: 40 }, // allow only 40 requests in 2 minutes\n        ],\n    })\n    async hello(ctx) {\n      this.sendOk(ctx, null, ctx.state.__('hello'));\n    }\n    ```\n\n* **middlewares of an Class**\n\n  ```sh\n  @Route.Route({\n      middlewares: [ // Array of middlewares\n        async (ctx, next) => {\n          console.log('I will be call before all route in this class');\n          await next();\n        },\n      ],\n  })\n  class RouteMiddlewares extends Route {\n      async view(ctx, next) {\n        console.log('I will be call after middlewares of class');\n        this.sendOk(ctx, null, ctx.state.__('hello'));\n      }\n  }\n  ```\n\n* **middlewares of a specific route**\n\n  ```sh\n  @Route.Get({\n      middlewares: [ // Array of middlewares\n        async (ctx, next) => {\n          console.log('I will be call before the route but after middlewares of class');\n          await next();\n        },\n      ],\n  })\n  async view(ctx, next) {\n      console.log('I will be call after middlewares of the class and route');\n      this.sendOk(ctx, null, ctx.state.__('hello'));\n  }\n  ```\n\n## Params checker of POST body\n\n* **all other fields which aren't in the params object will be rejected**\n* simplified writing\n\n  ```sh\n    params: ['email', 'name']\n    // is equal to\n    params: {\n      email: false,\n      name: false,\n    }\n    // is equal to\n    params: {\n      email: {\n        __force: false,\n      },\n      name: false,\n    }\n  ```\n* **more option:**\n    * `__force` [boolean] tells whether a field is required or not\n    * `__func` an `Array<Function>` to be executed on the field one by one in order to validate / transform it\n    * Eg:\n\n        ```sh\n        params: {\n          name: {\n            __force: false,\n            __func: [\n                utils.trim,\n                utilsParam.test(utils.notEmpty), // return 400 if empty\n                utils.capitalize,\n                (elem, route, { ctx, body, keyBody }) => {\n                  return elem.trim();\n                },\n                // do whatever you want...\n            ],\n          },\n        },\n        ```\n* **Eg: object nested inside another object:**\n\n    ```sh\n    params: {\n      user: {\n        __force: true,\n        name: {\n          __force: true,\n          __func: [utils.trim],\n        },\n        password: true,\n        address: {\n          __force: true,\n          country: true,\n          street: true,\n        }\n      },\n      date: false,\n    },\n    ```\n\n## Get Started ([quick-start boilerplate](https://github.com/ysocorp/koa-smart-light-example))\n\nin order to get started quickly, look at [this boilerplate](https://github.com/ysocorp/koa-smart-light-example), or follow the following instructions:\n\n  * import the app and your middlewares\n\n    ```sh\n    import { join } from 'path';\n    // import the app\n    import { App } from 'koa-smart';\n    // import middlewares koa-smart give you OR others\n    import {\n      bodyParser,\n      compress,\n      cors,\n      handleError,\n      RateLimit,\n      ...\n    } from 'koa-smart/middlewares';\n    ```\n\n  * create an app listening on port 3000\n\n    ```sh\n    const myApp = new App({\n      port: 3000,\n    });\n    ```\n\n  * add your middlewares\n\n    ```sh\n    myApp.addMiddlewares([\n      cors({ credentials: true }),\n      helmet(),\n      bodyParser(),\n      handleError(),\n      RateLimit.middleware({ interval: { min: 1 }, max: 100 }),\n      ...\n    ]);\n    ```\n\n  * add your routes\n    mount a folder with a prefix (all file who extends from `Route` will be added and mounted)\n\n    ```sh\n        myApp.mountFolder(join(__dirname, 'routes'), '/');\n    ```\n\n  * Start your app\n\n    ```sh\n    myApp.start();\n    ```\n\n### Full example\n\n  * Basic one\n\n    ```sh\n    import { join } from 'path';\n    // import the app\n    import { App } from 'koa-smart';\n    // import middlewares koa-smart give you OR others\n    import {\n      i18n,\n      bodyParser,\n      compress,\n      cors,\n      helmet,\n      addDefaultBody,\n      handleError,\n      logger,\n      RateLimit,\n    } from 'koa-smart/middlewares';\n\n    const myApp = new App({\n      port: 3000,\n    });\n\n    myApp.addMiddlewares([\n      cors({ credentials: true }),\n      helmet(),\n      bodyParser(),\n      i18n(myApp.app, {\n        directory: join(__dirname, 'locales'),\n        locales: ['en', 'fr'],\n        modes: ['query', 'subdomain', 'cookie', 'header', 'tld'],\n      }),\n      handleError(),\n      logger(),\n      addDefaultBody(),\n      compress({}),\n      RateLimit.middleware({ interval: { min: 1 }, max: 100 }),\n    ]);\n\n    // mount a folder with an prefix (all file who extends from `Route` will be add and mount)\n    myApp.mountFolder(join(__dirname, 'routes'), '/');\n\n    // start the app\n    myApp.start();\n    ```\n\n  * Other example who Extends class App\n\n    ```sh\n    import { join } from 'path';\n    // import the app\n    import { App } from 'koa-smart';\n    // import middlewares koa-smart give you OR others\n    import {\n      i18n,\n      bodyParser,\n      compress,\n      cors,\n      helmet,\n      addDefaultBody,\n      handleError,\n      logger,\n      RateLimit,\n    } from 'koa-smart/middlewares';\n\n    // create an class who extends from App class\n    export default class MyApp extends App {\n      constructor() {\n        super({ port: 3000 });\n      }\n\n      async start() {\n        // add your Middlewares\n        super.addMiddlewares([\n          cors({ credentials: true }),\n          helmet(),\n          bodyParser(),\n          i18n(this.app, {\n            directory: join(__dirname, 'locales'),\n            locales: ['en', 'fr'],\n            modes: ['query', 'subdomain', 'cookie', 'header', 'tld'],\n          }),\n          handleError(),\n          logger(),\n          addDefaultBody(),\n          compress({}),\n          RateLimit.middleware({ interval: { min: 1 }, max: 100 }),\n        ]);\n\n        // mount a folder with an prefix (all file who extends from `Route` will be add and mount)\n        super.mountFolder(join(__dirname, 'routes'));\n        return super.start();\n      }\n    }\n\n    // start the app\n    const myApp = new MyApp();\n    myApp.start();\n    ```\n\n## Add treatment on route\n  **you can add you own treatment and attribute to the route.**\n\n  In this example we will see how you can manage **accesses** to your route in 2 steps  \n\n  1. Extends `Route` Class and overload  `beforeRoute` methode\n\n  ```sh\n  export default class MyRoute extends Route {\n    static accesses = {\n      public: -1,\n      connected: 100,\n      admin: GROUPS.ADMIN_ID,\n      client: GROUPS.CLIENT_ID,\n      // whatever ...\n    };\n\n    // overload beforeRoute\n    async beforeRoute(ctx, infos, next) {\n      // infos.options content all the param give to the route\n\n      if (this.mlCanAccessRoute(ctx, infos.options)) { // test if you can access\n        this.throw(StatusCode.forbidden, ctx.state.__('Forbidden access'));\n      }\n      // call the super methode\n      await super.beforeRoute(ctx, infos, next);\n    }\n\n    mlCanAccessRoute(ctx, { accesses }) {\n      if (accesses && Array.isArray(accesses)) {\n        const { user } = ctx.state;\n        return accesses.includes(Route.accesses.public) ||\n          (!!user && (\n            accesses.includes(Route.accesses.connected) ||\n            user.usergroup_id === Route.accesses.admin ||\n            accesses.includes(user.usergroup_id)\n          ));\n      }\n      return false;\n    }\n  }\n\n  ```\n\n  2. Create an route with access\n\n  ```sh\n  export default class RouteMyApi extends MyRoute {\n    constructor(params) {\n      super({ ...params });\n    }\n\n    @Route.Get({ accesses: [MyRoute.accesses.public] })\n    async publicRoute(ctx) {\n      this.sendOk(ctx, ctx.i18n.__('I can be call by any one'));\n    }\n\n    @Route.Get({ accesses: [MyRoute.accesses.client] })\n    async clientRoute(ctx) {\n      this.sendOk(ctx, ctx.i18n.__('I can be call by only client user'));\n    }\n\n    @Route.Get({ accesses: [MyRoute.accesses.admin] })\n    async adminRoute(ctx) {\n      this.sendOk(ctx, ctx.state.__('I can be call by only admin user'));\n    }\n\n    @Route.Get({ accesses: [MyRoute.accesses.client, MyRoute.accesses.admin] })\n    async adminRoute(ctx) {\n      this.sendOk(ctx, ctx.state.__('I can be call by client and admin user'));\n    }\n\n    @Route.Get({ accesses: [MyRoute.accesses.connected] })\n    async adminRoute(ctx) {\n      this.sendOk(ctx, ctx.state.__('I can be call by all connected users'));\n    }\n  }\n  ```\n\n## License\n\n  MIT © [YSO Corp](http://ysocorp.com/)\n",
    "longname": "/home/elkaim_r/Project/koa-smart/README.md",
    "name": "./README.md",
    "static": true,
    "access": "public"
  }
]